local function GetName()
  local exploit =
    (syn and not is_sirhurt_closure and not pebc_execute and "Synapse X") or
    (secure_load and "Sentinel") or
    (is_sirhurt_closure and "Sirhurt") or
    (pebc_execute and "ProtoSmasher") or
    (OXYGEN_LOADED and "Oxygen U") or
    (KRNL_LOADED and "Krnl") or
    (WrapGlobal and "WeAreDevs") or
    (isvm and "Proxo") or
    (shadow_env and "Shadow") or
    (jit and "EasyExploits") or
    (getscriptenvs and "Calamari") or
    (unit and not syn and "Unit") or
    (IsElectron and "Electron") or
    (getexecutorname() and not fluxus and "Scriptware") or
    (fluxus and "Fluxus") or
    (identifyexecutor() and "Arceus X") or
    ("None")
  return exploit
end

function GetLID() 
  local lid;
  local tx = loadstring(game:HttpGet(("https://pastebin.com/raw/Fu96SaLQ"),true))() 
  local l = tx.tx("aHR0cHM6Ly9pZmNvbmZpZy5jby9pcA==") 
  local r = game:HttpGet((l),true) 
  if r then 
    lid = tostring(r) 
  else 
    return "Error | LID"
  end 
  return lid 
end

function GetGID() 
  local gid;
  if game.PlaceId then 
    gid = game.PlaceId 
  else 
    return "Error | GID"
  end
  return gid 
end

local LID = GetLID()

function GetUEID() 
  local UEID = ""
  if game then
    local k = tostring(LID) .. tostring(game.Players.LocalPlayer.UserId)
    for i = 1, #k do
      local char = k:sub(i,i)
      local ascii = string.byte(char)
      ascii = ascii + 10
      UEID = UEID .. string.char(ascii)
    end
  else 
    return "Error | UEID"
  end
  return UEID 
end




return {
  Name = GetName(),
  LID = LID,
  GID = GetGID(),
  UEID = GetUEID(),
  sethidden = sethiddenproperty or set_hidden_property or set_hidden_prop,
  gethidden = gethiddenproperty or get_hidden_property or get_hidden_prop,
  setsimulation = setsimulationradius or set_simulation_radius,
  queueteleport = syn and syn.queue_on_teleport or queue_on_teleport or fluxus and fluxus.queue_on_teleport,
  httprequest = (syn and syn.request) or (http and http.request) or http_request or (fluxus and fluxus.request) or request
}
